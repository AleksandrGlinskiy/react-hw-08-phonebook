{"version":3,"file":"static/js/463.822b7f1d.chunk.js","mappings":"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","sources":["redux/selectors.js","webpack://react-hw-08-phonebook/./src/components/Contact/ContactList.module.css?6fca","components/Contact/ContactList.jsx","webpack://react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://react-hw-08-phonebook/./src/components/Form/Form.module.css?89ba","components/Form/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter.filter;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__hJzGF\",\"nameNumber\":\"ContactList_nameNumber__5LcdD\",\"classListButton\":\"ContactList_classListButton__V6bmB\"};","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts, updateContact } from 'redux/operations';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport css from './ContactList.module.css';\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const filterContacts = useSelector(getFilter);\n\n  const removeContact = id => dispatch(deleteContact(id));\n\n  const [updateData, setUpdateData] = useState({\n    id: null,\n    name: '',\n    number: '',\n  });\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const toggleUpdateMode = (id, name, number) => {\n    setIsUpdating(true);\n    setUpdateData({ id, name, number });\n  };\n\n  const updatingContact = () => {\n    dispatch(\n      updateContact({\n        id: updateData.id,\n        data: { name: updateData.name, number: updateData.number },\n      })\n    );\n    setIsUpdating(false);\n    setUpdateData({ id: null, name: '', number: '' });\n  };\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterContacts.toLowerCase())\n  );\n\n  // console.log(visibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul>\n      {visibleContacts &&\n        visibleContacts.map(({ id, name, number }) => (\n          <li className={css.item} key={id}>\n            <span className={css.nameNumber}>{name}: </span>\n            <span className={css.nameNumber}>{number}</span>\n            <button\n              type=\"button\"\n              className={css.classListButton}\n              onClick={() => removeContact(id)}\n            >\n              Delete\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => toggleUpdateMode(id, name, number)}\n            >\n              Update\n            </button>\n          </li>\n        ))}\n\n      {isUpdating && (\n        <li>\n          <input\n            type=\"text\"\n            value={updateData.name}\n            onChange={e =>\n              setUpdateData({ ...updateData, name: e.target.value })\n            }\n          />\n          <input\n            type=\"text\"\n            value={updateData.number}\n            onChange={e =>\n              setUpdateData({ ...updateData, number: e.target.value })\n            }\n          />\n          <button type=\"button\" onClick={updatingContact}>\n            Save Update\n          </button>\n        </li>\n      )}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\n\nimport { getFilter } from 'redux/selectors';\nimport css from './Filter.module.css'\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterName = useSelector(getFilter)\n\n  const changeFilter = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n   \n  return (\n    <label className={css.label} htmlFor=\"\">\n        Find contacts by name \n      <input className={css.input} type=\"text\" value={filterName} onChange={changeFilter}/>\n      </label>\n  )\n\n}\n\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"formButton\":\"Form_formButton__7mGGM\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './Form.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/selectors';\nimport { addContact } from 'redux/operations';\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    e.preventDefault();\n\n    const findName = contacts.find(\n      contact => contact.name.toLowerCase().trim() === name.toLowerCase().trim()\n    );\n\n    if (findName) {\n      return alert(`${name} is already in contacts.`);\n    }\n    const findNumber = contacts.find(contact => contact.number.trim() === number.trim());\n    if (findNumber) {\n      return alert(`This phone number is already in contacts.`);\n    }\n\n    dispatch(addContact(contact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label} htmlFor=\"\">\n        Name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={css.label} htmlFor=\"\">\n        Number\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={css.formButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import { ContactList } from \"components/Contact/ContactList\"\nimport { Filter } from \"components/Filter/Filter\"\nimport { ContactForm } from \"components/Form/ContactForm\"\n\n\nconst Contacts = () => {\n  return (\n    <>\n    <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList /></>\n  )\n}\n\nexport default Contacts"],"names":["getContacts","state","contacts","items","getFilter","filter","ContactList","useSelector","dispatch","useDispatch","filterContacts","useState","id","name","number","updateData","setUpdateData","isUpdating","setIsUpdating","visibleContacts","contact","toLowerCase","includes","useEffect","fetchContacts","map","className","css","type","onClick","deleteContact","removeContact","toggleUpdateMode","value","onChange","e","target","updateContact","data","Filter","filterName","htmlFor","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","setName","setNumber","handleChange","reset","onSubmit","preventDefault","findName","find","trim","alert","findNumber","addContact","pattern","title","required"],"sourceRoot":""}