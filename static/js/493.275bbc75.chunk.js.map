{"version":3,"file":"static/js/493.275bbc75.chunk.js","mappings":"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","sources":["redux/selectors.js","webpack://react-hw-08-phonebook/./src/components/Contact/ContactList.module.css?6fca","../node_modules/@chakra-ui/layout/src/list.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs","components/Contact/ContactList.jsx","webpack://react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://react-hw-08-phonebook/./src/components/Form/Form.module.css?89ba","components/Form/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter.filter;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactList_item__hJzGF\",\"nameNumber\":\"ContactList_nameNumber__5LcdD\",\"classListButton\":\"ContactList_classListButton__V6bmB\",\"classListButtonUpdate\":\"ContactList_classListButtonUpdate__MJwzq\"};","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts, updateContact } from 'redux/operations';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport css from './ContactList.module.css';\nimport { ListItem, OrderedList } from '@chakra-ui/react';\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const filterContacts = useSelector(getFilter);\n\n  const removeContact = id => dispatch(deleteContact(id));\n\n  const [updateData, setUpdateData] = useState({\n    id: null,\n    name: '',\n    number: '',\n  });\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const toggleUpdateMode = (id, name, number) => {\n    setIsUpdating(true);\n    setUpdateData({ id, name, number });\n  };\n\n  const updatingContact = () => {\n    dispatch(\n      updateContact({\n        id: updateData.id,\n        data: { name: updateData.name, number: updateData.number },\n      })\n    );\n    setIsUpdating(false);\n    setUpdateData({ id: null, name: '', number: '' });\n  };\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterContacts.toLowerCase())\n  );\n\n  // console.log(visibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <OrderedList>\n      {visibleContacts &&\n        visibleContacts.map(({ id, name, number }) => (\n          <ListItem className={css.item} key={id}>\n            <span className={css.nameNumber}>{name}: </span>\n            <span className={css.nameNumber}>{number}</span>\n            <button\n              type=\"button\"\n              className={css.classListButton}\n              onClick={() => removeContact(id)}\n            >\n              Delete\n            </button>\n            <button\n              className={css.classListButtonUpdate}\n              type=\"button\"\n              onClick={() => toggleUpdateMode(id, name, number)}\n            >\n              Update\n            </button>\n          </ListItem>\n        ))}\n\n      {isUpdating && (\n        <ListItem>\n          <input\n            type=\"text\"\n            value={updateData.name}\n            onChange={e =>\n              setUpdateData({ ...updateData, name: e.target.value })\n            }\n          />\n          <input\n            type=\"text\"\n            value={updateData.number}\n            onChange={e =>\n              setUpdateData({ ...updateData, number: e.target.value })\n            }\n          />\n          <button type=\"button\" onClick={updatingContact}>\n            Save Update\n          </button>\n        </ListItem>\n      )}\n    </OrderedList>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\n\nimport { getFilter } from 'redux/selectors';\nimport css from './Filter.module.css'\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterName = useSelector(getFilter)\n\n  const changeFilter = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n   \n  return (\n    <label className={css.label} htmlFor=\"\">\n        Find contacts by name \n      <input className={css.input} type=\"text\" value={filterName} onChange={changeFilter}/>\n      </label>\n  )\n\n}\n\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"formButton\":\"Form_formButton__7mGGM\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './Form.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/selectors';\nimport { addContact } from 'redux/operations';\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    e.preventDefault();\n\n    const findName = contacts.find(\n      contact => contact.name.toLowerCase().trim() === name.toLowerCase().trim()\n    );\n\n    if (findName) {\n      return alert(`${name} is already in contacts.`);\n    }\n    const findNumber = contacts.find(contact => contact.number.trim() === number.trim());\n    if (findNumber) {\n      return alert(`This phone number is already in contacts.`);\n    }\n\n    dispatch(addContact(contact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} autoComplete='off'>\n      <label className={css.label} htmlFor=\"\">\n        Name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={css.label} htmlFor=\"\">\n        Number\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={css.formButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import { ContactList } from \"components/Contact/ContactList\"\nimport { Filter } from \"components/Filter/Filter\"\nimport { ContactForm } from \"components/Form/ContactForm\"\n\n\nconst Contacts = () => {\n  return (\n    <>\n    <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList /></>\n  )\n}\n\nexport default Contacts"],"names":["getContacts","state","contacts","items","getFilter","filter","createContext","errorMessage","ListStylesProvider","useListStyles","List","props","forwardRef","styles","children","styleType","useMultiStyleConfig","omitThemingProps","stylePosition","spacing","rest","validChildren","selector","spacingStyle","Children","child","isValidElement","getValidChildren","value","ul","name","listStyleType","chakra","role","__css","container","displayName","OrderedList","as","marginStart","UnorderedList","ListItem","ListIcon","Icon","ContactList","useSelector","dispatch","useDispatch","filterContacts","useState","id","number","updateData","setUpdateData","isUpdating","setIsUpdating","visibleContacts","contact","toLowerCase","includes","useEffect","fetchContacts","map","className","css","type","onClick","deleteContact","removeContact","toggleUpdateMode","onChange","e","target","updateContact","data","Filter","filterName","htmlFor","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","setName","setNumber","handleChange","reset","onSubmit","preventDefault","findName","find","trim","alert","findNumber","addContact","autoComplete","pattern","title","required"],"sourceRoot":""}